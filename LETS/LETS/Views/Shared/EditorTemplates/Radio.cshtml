@model object

@{
    List<SelectListItem> radioItems = new List<SelectListItem>();
    string category = "";
    Dictionary<string, string> referenceData = new Dictionary<string, string>();
    //Build up the data dictionary for variables to be used in the HTML
    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("Category") && !string.IsNullOrEmpty(ViewData.ModelMetadata.AdditionalValues["Category"].ToString()))
    {
        category = ViewData.ModelMetadata.AdditionalValues["Category"].ToString();
        if (MvcApplication.referenceDataDictionary.ContainsKey(category) && !string.IsNullOrEmpty(MvcApplication.referenceDataDictionary[category].ToString()))
        {
            referenceData = MvcApplication.referenceDataDictionary[category];
        }
    }

    if (referenceData.Count > 0)
    {
        foreach (var dataItem in referenceData)
        {
            radioItems.Add(new SelectListItem { Text = dataItem.Key, Value = dataItem.Value });
        }
    }
    else
    {
        radioItems.Add(new SelectListItem { Text = "Yes", Value = "true", Selected = true });
        radioItems.Add(new SelectListItem { Text = "No", Value = "false", Selected = false });
    }

    String modelValue = string.Empty;
    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("Category") && !ViewData.ModelMetadata.ModelType.Equals(typeof(bool?)))
    {
        if (Model != null)
        {
            modelValue = Html.NameForModel().ToString() + "=" + "'" + Model.ToString() + "'";
        }
    }
    else
    {
        if (Model != null && (Model as bool?).HasValue)
        {
            modelValue = Html.NameForModel().ToString() + "=" + "'" + (Model as bool?).Value.ToString() + "'";
        }
    }
}
<div class="row">
    <div class="form-group col-xs-12 @(ViewData.ModelState != null && !ViewData.ModelState.IsValid && ViewData.ModelState[Html.NameForModel().ToString()] != null && ViewData.ModelState[Html.NameForModel().ToString()].Errors.Any() ? "has-error" : "")">
        <fieldset>
            <div class="row">
                <div class="col-sm-12">
                    <label>@(ViewData.ContainsKey("label") && ViewData["label"] != null ? ViewData["label"].ToString() : Html.NameForModel().ToString())</label>
                    @if (ViewData.ContainsKey("subtext") && ViewData["subtext"] != null)
                    {
                        <p>@ViewData["subtext"]</p>
                    }
                </div>
            </div>
            <div ng-init="@modelValue" class="row radio-group no-margin">
                <fieldset>
                    @foreach (var item in radioItems)
                    {
                        var dataDictionary = new Dictionary<string, object>();

                        if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("Category") && !string.IsNullOrEmpty(ViewData.ModelMetadata.AdditionalValues["Category"].ToString()))
                        {
                            dataDictionary.Add("category", ViewData.ModelMetadata.AdditionalValues["Category"].ToString());
                        }

                        //Add the required validation message if present
                        if (ViewData.ContainsKey("required_message") && ViewData["required_message"] != null && ViewData["required_message"].ToString() != "")
                        {
                            dataDictionary.Add("required", "true");
                            dataDictionary.Add("data-val-required", ViewData["required_message"]);
                        }

                        //Add the core input attributes
                        dataDictionary.Add("ng-model", Html.NameForModel().ToString());
                        dataDictionary.Add("id", Html.IdForModel() + "-" + item.Value);
                        dataDictionary.Add("ng-checked", "(" + @Html.NameForModel() + "==" + "'" + item.Value + "')");
                        var inputId = Html.IdForModel() + "-" + item.Value;
                        <div class="col-xs-@(12/radioItems.Count) no-padding radio-toggle">
                            @if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("Category") && !ViewData.ModelMetadata.ModelType.Equals(typeof(bool?)))
                            {
                                if (Model != null && Model.ToString().Equals(item.Value))
                                {
                                    dataDictionary.Add("checked", "checked");
                                }
                                @Html.RadioButtonFor(m => m, item.Value, dataDictionary)
                            }
                            else
                            {
                                if (Model != null && (Model as bool?).HasValue && (Model as bool?).Value == Convert.ToBoolean(item.Value))
                                {
                                    dataDictionary.Add("checked", "checked");
                                }
                                try
                                {
                                    @Html.RadioButtonFor(m => m, @item.Value, dataDictionary)
                                }
                                catch (Exception)
                                {
                                    @Html.RadioButtonFor(m => m, @item.Value, dataDictionary)
                                }
                            }
                            <label for=@(Html.IdForModel() + "-" + item.Value) class="btn col-xs-12 radio-label">
                                <span>@item.Text</span>
                            </label>
                        </div>
                    }
                </fieldset>
            </div>
            <div class="error-block">
                <div class="error-message" role="alert">
                    <label>@Html.ValidationMessageFor(model => model, String.Empty)</label>
                </div>
            </div>
        </fieldset>
    </div>
</div>